{% extends 'homepage.html.twig' %}
{% import 'macros.html.twig' as macros %}
{% import 'layout.html.twig' as layout %}

{% block title %}Gin :: Experiment :: {{ experiment.name }} :: {{ run.name }}{% endblock %}

{% block body_main %}
    <div class="row">
        <div class="container container-fluid w-100 p-0 m-0">
            {{ layout.header(run.name) }}

            {{ layout.toolbox([
                {
                    "type": "up",
                    "target": url("app_experiments_view", {"experiment": experiment.id}),
                    "tooltipText": "Back to experiment",
                }, {
                    "type": "other",
                    "target": url("api_single_run", {"experimentalRun": run.id}),
                    "btnClass": "btn-secondary",
                    "iconClass": "fas fa-fw fa-download",
                    "tooltipText": "Get run data as CSV",
                }, {
                    "type": "edit",
                    "target": url("app_experiments_edit_run", {"experiment": experiment.id, "experimentalRun": run.id}),
                    "tooltipText": "Edit experimental run",
                }, {
                    "type": "clone",
                    "target": url("app_experiments_clone_run", {"experimentalRun": run.id}),
                    "tooltipText": "Clone experimental run",
                }, {
                    "type": "trash",
                    "target": url("app_experiments_drop_run", {"experimentalRun": run.id}),
                    "tooltipText": "Trash experimental run",
                    "confirmationRequired": true,
                    "confirmationText": "Are you sure you want to delete this run? You cannot undo this action.",
                }
            ]) }}

            <div class="row">
                <div class="col col-12 col-lg-6 p-0 m-0 mb-3">
                    <div class="card mx-3 h-100">
                        {{ layout.card_header_collapse("Details", "Details") }}

                        {{ layout.card_body_collapse_start("Details") }}
                        <div class="card-body px-lg-5">
                            <table class="table table-sm table-borderless table-hover">
                                <tbody>
                                {{ macros.definition_row("Name", run.name) }}
                                {{ macros.definition_row("Owner", run.owner) }}
                                {{ macros.definition_row("Created", run.createdAt|date("d. M Y H:i")) }}
                                {{ macros.definition_row("Last modified", run.modifiedAt|date("d. M Y H:i")) }}

                                {% if run.data.conditions is defined %}
                                    {% for condition in run.data["conditions"] %}
                                        {% if condition.type is defined and condition.type == "chemical" %}
                                            {% if condition.value|length < 10 %}
                                                {{ macros.definition_row(condition.title, "((chemical#" ~ condition.value ~ "))") }}
                                            {% else %}
                                                {% set chem = chemicals.find(condition.value) %}
                                                {{ macros.definition_row_raw(condition.title, macros.chemlink(chem)) }}
                                            {% endif %}
                                        {% elseif condition.type is defined and condition.type == "protein" %}
                                            {% if condition.value|length < 10 %}
                                                {{ macros.definition_row(condition.title, "((protein#" ~ condition.value ~ "))") }}
                                            {% else %}
                                                {% set protein = proteins.find(condition.value) %}
                                                {{ macros.definition_row_raw(condition.title, macros.proteinlink(protein)) }}
                                            {% endif %}
                                        {% else %}
                                            {{ macros.definition_row(condition.title, condition.value) }}
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}
                                </tbody>
                            </table>
                        </div>
                        {{ layout.card_body_collapse_end() }}
                    </div>
                </div>

                <div class="col col-12 col-lg-6 p-0 m-0 mb-3">
                    <div class="card mx-3 h-100">
                        {# Non-collapsible because otherwise the data will not be drawn. For whatever reason. #}
                        {{ layout.card_header_collapse("Data Preview") }}

                        {{ layout.card_body_collapse_start() }}
                        <div class="card-body px-lg-5">
                            {% set x_id = null %}
                            {% set y_ids = [] %}

                            {# Save the ID of the last 'isX' column. #}
                            {% for condition in experiment.conditions %}
                                {% if condition.isX == true %}
                                    {% set x_id = condition.id %}
                                {% endif %}
                            {% endfor %}

                            {# Save a collection of all IDs marked as 'isY' #}
                            {% for measurement in experiment.measurements %}
                                {% if measurement.isY == true %}
                                    {% set y_ids = y_ids|merge([measurement.id]) %}
                                {% endif %}
                            {% endfor %}

                            {% if x_id == null or y_ids|length == 0 %}
                                <div>Preview not possible, as the experiment does not define any conditions as X or any measurement as Y.</div>
                            {% else %}
                                <div id="preview_plot"></div>
                            {% endif %}
                        </div>
                        {{ layout.card_body_collapse_end() }}
                    </div>
                </div>

                <div class="col col-12 p-0 m-0 mb-3">
                    <div class="card mx-3 h-100">
                        {{ layout.card_header_collapse("Data", "Data") }}

                        {{ layout.card_body_collapse_start("Data") }}

                        {{ layout.toolbox_card([
                            {
                                "type": "edit-table",
                                "target": url("app_experiments_edit_run_wells", {"experimentalRun": run.id}),
                                "tooltipText": "Edit data",
                            }
                        ]) }}

                        <div class="card-body overflow-auto px-lg-5" style="max-height: 40rem">
                            {% set condition_ids = [] %}
                            {% set measurement_ids = [] %}

                            <table class="table table-hover table-sm">
                                <thead>
                                <tr>
                                    <th>#</th>
                                    <th>ESTD</th>
                                    <th>Name</th>
                                    {% for condition in experiment.conditions %}
                                        {% if condition.general == false %}
                                            {% set condition_ids = condition_ids|merge([condition.id.toBase58()]) %}
                                            <th>{{ condition.title }}</th>
                                        {% endif %}
                                    {% endfor %}
                                    {% for measurement in experiment.measurements %}
                                        {% set measurement_ids = measurement_ids|merge([measurement.id.toBase58()]) %}
                                        {% if measurement.internalStandard %}
                                            <th>{{ measurement.title }} (ISTD)</th>
                                        {% else %}
                                            <th>{{ measurement.title }}</th>
                                        {% endif %}
                                    {% endfor %}
                                </tr>
                                </thead>
                                <tbody>
                                {% for well in run.wells %}
                                    <tr>
                                        <td>
                                            {{ well.wellNumber }}
                                        </td>
                                        <td>
                                            {% if well.isExternalStandard %}
                                                Y
                                            {% endif %}
                                        </td>
                                        <td>
                                            {{ well.wellName }}
                                        </td>

                                        {% if well.wellData.conditions is defined %}
                                            {% for condition_id in condition_ids %}
                                                {% for condition in well.wellData.conditions|filter(c => condition_id == c.id) %}
                                                    {% if condition.type is defined and condition.type == "chemical" %}
                                                        {% if condition.value|length < 10 %}
                                                            <td>((chemical#{{ condition.value }}))</td>
                                                        {% else %}
                                                            {% set chem = chemicals.find(condition.value) %}
                                                            {% if chem %}
                                                                <td>{{ macros.chemlink(chem) }}</a></td>
                                                            {% else %}
                                                                <td>((chemical#{{ condition.value }}))</td>
                                                            {% endif %}
                                                        {% endif %}
                                                    {% elseif condition.type is defined and condition.type == "protein" %}
                                                        {% if condition.value|length < 10 %}
                                                            {# Important if old data is around. #}
                                                            <td>((protein#{{ condition.value }}))</td>
                                                        {% else %}
                                                            {% set protein = proteins.find(condition.value) %}
                                                            {% if protein %}
                                                                <td>{{ macros.proteinlink(protein) }}</a></td>
                                                            {% else %}
                                                                <td>((protein#{{ condition.value }}))</td>
                                                            {% endif %}
                                                        {% endif %}
                                                    {% elseif condition.type == 'check' %}
                                                        {% if condition.value %}
                                                            <td>Y</td>
                                                        {% else %}
                                                            <td></td>
                                                        {% endif %}
                                                    {% else %}
                                                        <td>{{ condition.value }}</td>
                                                    {% endif %}
                                                {% else %}
                                                    <td></td>
                                                {% endfor %}
                                            {% endfor %}
                                        {% else %}
                                            {% for condition_id in condition_ids %}
                                                <td></td>
                                            {% endfor %}
                                        {% endif %}

                                        {% if well.wellData.measurements is defined %}
                                            {% for measurement_id in measurement_ids %}
                                                {% for measurement in well.wellData.measurements|filter(m => measurement_id == m.id) %}
                                                    {% if measurement.type == 'check' %}
                                                        {% if measurement.value %}
                                                            <td>Y</td>
                                                        {% else %}
                                                            <td></td>
                                                        {% endif %}
                                                    {% else %}
                                                        <td>{{ measurement.value }}</td>
                                                    {% endif %}
                                                {% else %}
                                                    <td></td>
                                                {% endfor %}
                                            {% endfor %}
                                        {% else %}
                                            {% for measurement_id in measurement_ids %}
                                                <td></td>
                                            {% endfor %}
                                        {% endif %}
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                        {{ layout.card_body_collapse_end() }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block script_bottom %}
    {% set x_id = null %}
    {% set y_ids = [] %}

    {# Save the ID of the last 'isX' column. #}
    {% for condition in experiment.conditions %}
        {% if condition.isX == true %}
            {% set x_id = condition.id %}
        {% endif %}
    {% endfor %}

    {# Save a collection of all IDs marked as 'isY' #}
    {% for measurement in experiment.measurements %}
        {% if measurement.isY == true %}
            {% set y_ids = y_ids|merge([measurement.id]) %}
        {% endif %}
    {% endfor %}

    {% if x_id != null and y_ids|length > 0 %}
    <script type="application/javascript">
        const plotArea = $("#preview_plot");
        const referenceElement = $(plotArea[0].parentElement.parentElement.parentElement);

        let margin = {};
        let width = 0;
        let height = 0;

        // set the dimensions and margins of the graph
        if (plotArea.width < 768) {
            margin = {top: 10, right: 10, bottom: 10, left: 10};
            width = referenceElement.width() - margin.left - margin.right - 20;
            height = Math.max(400, plotArea.height()) - margin.top - margin.bottom;

        } else {
            margin = {top: 30, right: 30, bottom: 30, left: 30};
            width = referenceElement.width() - margin.left - margin.right - 60;
            height = Math.max(400, plotArea.height()) - margin.top - margin.bottom;
        }

        // append the svg object to the body of the page
        const svg = d3.select("#preview_plot")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        const data_x = [
            // add each data point
            // ID should be {{ x_id }}
            {% for well in run.wells -%}
                {%- if well.wellData.conditions is defined -%}
                    {%- for condition in well.wellData.conditions|filter(c => x_id == c.id or x_id.toBase58 == c.id) -%}
                        {{ condition.value }}, {{ "" }}
                    {%- endfor -%}
                {%- endif -%}
            {% endfor %}

        ]; // define x data

        const data_y = [
            // for each y add data points
            {% for y_id in y_ids -%}
                [
                {% for well in run.wells -%}
                    {%- if well.wellData.measurements is defined -%}
                        {%- for measurement in well.wellData.measurements|filter(c => y_id == c.id or y_id.toBase58 == c.id) -%}
                            {{ measurement.value }}, {{ "" }}
                        {%- endfor -%}
                    {%- endif -%}
                {% endfor -%}
                ], {{ "" }}
            {% endfor %}
        ];

        // Add X axis
        let x;
        if (d3.max(data_x)/d3.min(data_x) > 100) {
            // 2 magnitudes cried for logarithmic scale
            x = d3.scaleLog()
                .base(10)
                .domain([d3.min(data_x), d3.max(data_x)])
                .range([ 0, width ]);
        } else {
            // If not, then we use normal scale
            x = d3.scaleLinear()
                .domain([d3.min(data_x), d3.max(data_x)])
                .range([ 0, width ]);
        }

        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // Add Y axis
        const y = d3.scaleLinear()
            .domain([d3.min(data_y[0]), d3.max(data_y[0])])
            .range([ height, 0]);

        svg.append("g")
            .call(d3.axisLeft(y));

        data = function(x, y) {
            let data = [];

            for (let i = 0; i < x.length; i++) {
                data.push({"x": x[i], "y": y[i]});
            }

            return data;
        }

        // Add dots
        svg.append('g')
            .selectAll("dot")
            .data(data(data_x, data_y[0]))
            .enter()
            .append("circle")
            .attr("cx", function (d) { return x(d.x); } )
            .attr("cy", function (d) { return y(d.y); } )
            .attr("r", 5)
            .style("fill", "#000000");
    </script>
    {% endif %}
{% endblock %}